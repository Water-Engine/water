#pragma once

#include "bitboard/bitboard.hpp"

#include "game/coord.hpp"

// ================ SLIDER MOVE RESTRICTIONS ================

inline constexpr Coord ROOK_DIRECTIONS[4] = {
    Coord(-1, 0),
    Coord(1, 0),
    Coord(0, 1),
    Coord(0, -1),
};

inline constexpr Coord BISHOP_DIRECTIONS[4] = {
    Coord(-1, 1),
    Coord(1, 1),
    Coord(1, -1),
    Coord(-1, -1),
};

inline constexpr int ROOK_SHIFTS[64] = {
    52, 53, 53, 53, 53, 53, 53, 52, 53, 54, 54, 54, 54, 54, 54, 53, 53, 54, 54, 54, 54, 54,
    54, 53, 53, 54, 54, 54, 54, 54, 54, 53, 53, 54, 54, 54, 54, 54, 54, 53, 53, 54, 54, 54,
    54, 54, 54, 53, 53, 54, 54, 54, 54, 54, 54, 53, 52, 53, 53, 53, 53, 53, 53, 52};

inline constexpr int BISHOP_SHIFTS[64] = {
    58, 59, 59, 59, 59, 59, 59, 58, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 57, 57, 57, 57,
    59, 59, 59, 59, 57, 55, 55, 57, 59, 59, 59, 59, 57, 55, 55, 57, 59, 59, 59, 59, 57, 57,
    57, 57, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 58, 59, 59, 59, 59, 59, 59, 58};

inline constexpr uint64_t ROOK_MAGICS[64] = {
    0x00800080205D4000ULL, 0x224002200010004CULL, 0x1200201040820008ULL, 0x0880058008001001ULL,
    0x0480020800800400ULL, 0x4A00081004020041ULL, 0x4500208200040100ULL, 0x2080008000204900ULL,
    0x0081002040800100ULL, 0x0400402010004000ULL, 0x4001002001004014ULL, 0x000500100021008CULL,
    0x0211000800110004ULL, 0x4402000402000810ULL, 0x0001000402000100ULL, 0x0022000220804104ULL,
    0x4200208008401080ULL, 0x0210044000402008ULL, 0x0009010020001840ULL, 0x000042000A002010ULL,
    0x2004050008010031ULL, 0x0001010008040002ULL, 0x4804010100040200ULL, 0x0004220020804401ULL,
    0x0880004040002000ULL, 0x0D90004240002006ULL, 0x0000114500200500ULL, 0x4891002100081000ULL,
    0x6000100500080100ULL, 0x0020040801204010ULL, 0x00120006000C0801ULL, 0x2381008200004104ULL,
    0x0080002000404000ULL, 0x00A0208101004000ULL, 0x0209082001001040ULL, 0x0840100021000900ULL,
    0x4000080005001100ULL, 0x0200400408011020ULL, 0x4220010204000810ULL, 0x1004148522000444ULL,
    0x4880002000494001ULL, 0x0001008040010022ULL, 0x0110208200420011ULL, 0x0240090010010022ULL,
    0x0014008040080800ULL, 0x0002018410020008ULL, 0x2428020004010100ULL, 0x00000484004A0015ULL,
    0x0980400020800080ULL, 0x0200400100862500ULL, 0x0404408020120A00ULL, 0x0009001002086300ULL,
    0x0003000800500500ULL, 0x0002018804100200ULL, 0x2B80101142180400ULL, 0x1102108054010200ULL,
    0x000020820010410AULL, 0x0242004100801822ULL, 0x0180130020000A41ULL, 0x0002100005002109ULL,
    0x0002001020080446ULL, 0x008100020824008DULL, 0x0100081012290084ULL, 0x0200140040810822ULL};

inline constexpr uint64_t BISHOP_MAGICS[64] = {
    0x4004200818450040ULL, 0x0450020200620000ULL, 0x4010490161001851ULL, 0x1818048910020040ULL,
    0x0004042000040085ULL, 0x2809100210000020ULL, 0x6000480444200428ULL, 0x0080140401182800ULL,
    0x0420102061044088ULL, 0x1001020222040114ULL, 0x1001089214002000ULL, 0x4000084841040202ULL,
    0x1254040422C00C10ULL, 0x000A110420060400ULL, 0x4000008801101024ULL, 0x0000044400841050ULL,
    0x0AC0086149010500ULL, 0x0402000802840404ULL, 0x0048083012882008ULL, 0x1062082020204002ULL,
    0x1004002A060A2202ULL, 0x0424080110080410ULL, 0x0102000841046000ULL, 0x004A0C110DC6020EULL,
    0x0012220040242400ULL, 0x04025000081000A0ULL, 0x40050440100C00A0ULL, 0x2020080401004008ULL,
    0x0001010001904001ULL, 0x0802048048B01002ULL, 0x0018084C02020280ULL, 0x010444812444042EULL,
    0x0004042032042000ULL, 0x40C4300201040402ULL, 0x0004020800010040ULL, 0x0082004040040100ULL,
    0x4044050200040085ULL, 0x0002082600804040ULL, 0x5904014210004804ULL, 0x0008011100002090ULL,
    0x0082100220000800ULL, 0x01460202608C4288ULL, 0x1482002024102800ULL, 0x3401002218000400ULL,
    0x0100200122100400ULL, 0x0420020C04400808ULL, 0x4108080100604402ULL, 0x0088384040401080ULL,
    0x0000413010104204ULL, 0x0000404848085009ULL, 0x1000009048081020ULL, 0x2006000020880000ULL,
    0x0030262821090808ULL, 0x0220091001020000ULL, 0x104A024838090400ULL, 0x0020013101010110ULL,
    0x01C0210050042004ULL, 0x0000004108011106ULL, 0x20001202440C1104ULL, 0x0200012630841100ULL,
    0x0841200510820211ULL, 0x1020004024080220ULL, 0x4204202234010400ULL, 0x400810090245020AULL};

// ================ GENERATED ONCE AT RUNTIME ================

class Magics {
  private:
    std::array<Bitboard, 64> m_RookMask;
    std::array<Bitboard, 64> m_BishopMask;
    std::array<std::vector<Bitboard>, 64> m_RookAttacks;
    std::array<std::vector<Bitboard>, 64> m_BishopAttacks;

  private:
    Magics();

    static std::vector<Bitboard> create_table(int square_idx, bool is_ortho_slider, uint64_t magic,
                                              int left_shift);

    static std::vector<Bitboard> create_all_blockers(const Bitboard& movement_mask);
    static Bitboard create_movement_mask(int square_idx, bool is_ortho_slider);
    static Bitboard legal_move_bb(int square_idx, const Bitboard& blocker_bb, bool is_ortho_slider);

  public:
    Magics(const Magics&) = delete;
    Magics& operator=(const Magics&) = delete;
    Magics(Magics&&) = delete;
    Magics& operator=(Magics&&) = delete;

    static Magics& instance() {
        static Magics s_instance;
        return s_instance;
    }

    Bitboard get_rook_attacks(int square, const Bitboard& blockers);
    Bitboard get_bishop_attacks(int square, const Bitboard& blockers);
};