#pragma once

#include "bitboard/bitboard.hpp"

#include "game/coord.hpp"

// ================ SLIDER MOVE RESTRICTIONS ================

inline constexpr Coord ROOK_DIRECTIONS[4] = {
    Coord(-1, 0),
    Coord(1, 0),
    Coord(0, 1),
    Coord(0, -1),
};

inline constexpr Coord BISHOP_DIRECTIONS[4] = {
    Coord(-1, 1),
    Coord(1, 1),
    Coord(1, -1),
    Coord(-1, -1),
};

// ================ PREGENERATED FROM LITERATURE ================

inline constexpr int ROOK_SHIFTS[64] = {
    52, 52, 52, 52, 52, 52, 52, 52, 53, 53, 53, 54, 53, 53, 54, 53, 53, 54, 54, 54, 53, 53,
    54, 53, 53, 54, 53, 53, 54, 54, 54, 53, 52, 54, 53, 53, 53, 53, 54, 53, 52, 53, 54, 54,
    53, 53, 54, 53, 53, 54, 54, 54, 53, 53, 54, 53, 52, 53, 53, 53, 53, 53, 53, 52,
};

inline constexpr int BISHOP_SHIFTS[64] = {
    58, 60, 59, 59, 59, 59, 60, 58, 60, 59, 59, 59, 59, 59, 59, 60, 59, 59, 57, 57, 57, 57,
    59, 59, 59, 59, 57, 55, 55, 57, 59, 59, 59, 59, 57, 55, 55, 57, 59, 59, 59, 59, 57, 57,
    57, 57, 59, 59, 60, 60, 59, 59, 59, 59, 60, 60, 58, 60, 59, 59, 59, 59, 59, 58,
};

inline constexpr uint64_t ROOK_MAGICS[64] = {
    0x068000814008B4A0ULL, 0xFFBFFFDFF7EFDFFDULL, 0x232000AC16A02028ULL, 0x5490000442001110ULL,
    0xBFEFFE7BFCF5F9F7ULL, 0xDFE7DFF7FAFFFF7BULL, 0xAFEFEFF77FBDFFF9ULL, 0x4B00017282420100ULL,
    0x000780084002A984ULL, 0xFFBFF7DFBF6FE3BEULL, 0xEFFFAFFEEF9FFDFFULL, 0x448A002040B2002AULL,
    0x6AD97FD7FBFF7FDEULL, 0x7DFDFFFDFEF7EFFFULL, 0x0806000200010C68ULL, 0x83CA800080014300ULL,
    0x1008208000400199ULL, 0x8002808020044004ULL, 0x197A020040322180ULL, 0x0710C2000A001122ULL,
    0xE6D7FDFFDFFBF5FFULL, 0xFFFFBFEEFDFC7FFFULL, 0x858E34006A100F08ULL, 0x4083A20002841043ULL,
    0x0A4000C480008365ULL, 0x180CA08100400508ULL, 0x2150717010040800ULL, 0x48001000A0040A18ULL,
    0x908801190011001CULL, 0x10220082005C0810ULL, 0x8268502400281302ULL, 0x08A341820010490CULL,
    0x6EFFDFF7AFBFFF3EULL, 0x6B21A010084000C3ULL, 0xE090000880C5E000ULL, 0xFFEEFFAFFCFFFBDFULL,
    0x0004807830010040ULL, 0xFFFFEFFBF7FF5FBFULL, 0x10D91210D4000308ULL, 0x4088938502000444ULL,
    0x860184A040544000ULL, 0xFFF7BFF77DF677FFULL, 0x33486280B2020041ULL, 0x9310210470010018ULL,
    0xFFD9FEFB23B1FFFEULL, 0xFFFFEFFDFFFB7FDFULL, 0x3000C21D08040010ULL, 0x008B00058C410016ULL,
    0x800E8002A9400680ULL, 0x59E2C4AE01008200ULL, 0x11A110A0C2048200ULL, 0x280083B000680080ULL,
    0xA04008A014265001ULL, 0x19C4088200010040ULL, 0x000925082A303C00ULL, 0x448221840AC90600ULL,
    0xBDFFFEFBBDDD7FFFULL, 0xDBFFFF3FEFD7BFFFULL, 0xFDFFFFDFFFBFAFB5ULL, 0xAFFFFEFF9FEFFF57ULL,
    0xBFEFFFFDF7FA9D6EULL, 0xFDFFFFE7FBFFFEFFULL, 0x6DF7FFF7FEFDEFFCULL, 0x41B3988401214702ULL};

inline constexpr uint64_t BISHOP_MAGICS[64] = {
    0xE51EBB94FBE45BFFULL, 0xC7B9F567ED8FFE7FULL, 0x19A8282157800224ULL, 0x04D41401923C73BEULL,
    0x480404A14244000DULL, 0x340E01FEA0C933AFULL, 0xFFC3F989D57FE9ECULL, 0xF7FF3FDD6EFBFFFFULL,
    0xE7F974F4F9D9F7F5ULL, 0x222161180311C580ULL, 0x62003808704081A0ULL, 0x70425C0408830360ULL,
    0x66E5E110419250CDULL, 0x8420220834154952ULL, 0xEDE7F5ADF8FDFFFDULL, 0x7F7EEA5F3D59BF5EULL,
    0x4478024050810631ULL, 0x2A22030490025601ULL, 0xD0E4044848002500ULL, 0x518C08C801212289ULL,
    0x1002004402111108ULL, 0x5858102901009007ULL, 0x2230A1C412051005ULL, 0x142B042E41082700ULL,
    0x882011AE8850A508ULL, 0x274320C508181108ULL, 0x080090048E040014ULL, 0x508C00C01C0100B2ULL,
    0x424300102B004000ULL, 0x0490144022080230ULL, 0x20C280B11C020814ULL, 0x00020600C42C9212ULL,
    0xF3BFC5C66B10122FULL, 0xA25801B000C42434ULL, 0x500144A208900400ULL, 0x6080140400780120ULL,
    0x124C0B40100C0100ULL, 0x7048004100909018ULL, 0xE8781EC402008A01ULL, 0x4D221A0600807284ULL,
    0xED4FF5C4EA9B2418ULL, 0x6D9FE6F7B7EFDEB4ULL, 0x433D610048044041ULL, 0x00086A2018040300ULL,
    0x214B14110C006200ULL, 0x60D2241106001C0AULL, 0x2B7F1018F2EBFDCCULL, 0x783438008E252100ULL,
    0xEFBFFD71EEAD7FFFULL, 0xD597FE7D435F79FFULL, 0x9FFFF7FB3D9C7377ULL, 0x8910144620981000ULL,
    0xE40D01A0208A40F9ULL, 0xA63240B31425025CULL, 0x9EFFEBF61DD769FBULL, 0x877FCE36D752FA8EULL,
    0xEB5FFD776D5FDFBEULL, 0xD7FDFFFEBCF2DEFFULL, 0xD01801C04208900FULL, 0x830639EF5720980AULL,
    0xC9C018202182C400ULL, 0x893B2D4094880E8CULL, 0xFBBEFDF552EB5AE6ULL, 0xFEFFFBFB7BDFDDFBULL};

// ================ GENERATED ONCE AT RUNTIME ================

class Magics {
  private:
    std::array<Bitboard, 64> m_RookMask;
    std::array<Bitboard, 64> m_BishopMask;
    std::array<std::vector<Bitboard>, 64> m_RookAttacks;
    std::array<std::vector<Bitboard>, 64> m_BishopAttacks;

  private:
    Magics();

    static std::vector<Bitboard> create_table(int square_idx, bool is_ortho_slider, uint64_t magic,
                                              int left_shift);

    static std::vector<Bitboard> create_all_blockers(const Bitboard& movement_mask);
    static Bitboard create_movement_mask(int square_idx, bool is_ortho_slider);
    static Bitboard legal_move_bb(int square_idx, const Bitboard& blocker_bb, bool is_ortho_slider);

  public:
    Magics(const Magics&) = delete;
    Magics& operator=(const Magics&) = delete;
    Magics(Magics&&) = delete;
    Magics& operator=(Magics&&) = delete;

    static Magics& instance() {
        static Magics s_instance;
        return s_instance;
    }

    Bitboard get_rook_attacks(int square, const Bitboard& blockers);
    Bitboard get_bishop_attacks(int square, const Bitboard& blockers);
};